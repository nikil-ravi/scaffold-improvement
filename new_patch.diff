diff --git a/django/contrib/postgres/forms/jsonb.py b/django/contrib/postgres/forms/jsonb.py
index 7f9d992cd9..d92f20ae29 100644
--- a/django/contrib/postgres/forms/jsonb.py
+++ b/django/contrib/postgres/forms/jsonb.py
@@ -1,7 +1,7 @@
 import json
 
 from django import forms
-from django.utils.translation import gettext_lazy as _
+from django.core.exceptions import ValidationError
 
 __all__ = ['JSONField']
 
@@ -17,7 +17,7 @@ class JSONField(forms.CharField):
     def to_python(self, value):
         if self.disabled:
             return value
-        if value in self.empty_values:
+        if value in self.empty_values and not self.required:
             return None
         elif isinstance(value, (list, dict, int, float, JSONString)):
             return value
@@ -25,10 +25,10 @@ class JSONField(forms.CharField):
             converted = json.loads(value)
         except json.JSONDecodeError:
             raise forms.ValidationError(
-                self.error_messages['invalid'],
+                self.default_error_messages['invalid'],
                 code='invalid',
                 params={'value': value},
-            )
+            ) from None
         if isinstance(converted, str):
             return JSONString(converted)
         else:
diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py
index c69bbef78f..ac3d09a1d1 100644
--- a/django/db/models/functions/comparison.py
+++ b/django/db/models/functions/comparison.py
@@ -1,4 +1,5 @@
 """Database functions that do comparisons or type conversions."""
+from decimal import Decimal
 from django.db.models.expressions import Func, Value
 
 
@@ -53,14 +54,21 @@ class Coalesce(Func):
     function = 'COALESCE'
 
     def __init__(self, *expressions, **extra):
-        if len(expressions) < 2:
-            raise ValueError('Coalesce must take at least two expressions')
-        super().__init__(*expressions, **extra)
+        if not expressions:
+            raise ValueError('Coalesce must have at least one expression')
+        
+        # Process decimal values 
+        processed_expressions = []
+        for expr in expressions:
+            if isinstance(expr, Decimal):
+                processed_expressions.append(Value(expr))
+            else:
+                processed_expressions.append(expr)
+        
+        super().__init__(*processed_expressions, **extra)
 
     def as_oracle(self, compiler, connection, **extra_context):
-        # Oracle prohibits mixing TextField (NCLOB) and CharField (NVARCHAR2),
-        # so convert all fields to NCLOB when that type is expected.
-        if self.output_field.get_internal_type() == 'TextField':
+        if self.output_field and self.output_field.get_internal_type() == 'TextField':
             clone = self.copy()
             clone.set_source_expressions([
                 Func(expression, function='TO_NCLOB') for expression in self.source_expressions
diff --git a/tests/postgres_tests/test_json.py b/tests/postgres_tests/test_json.py
new file mode 100644
index 0000000000..bec8e5b0f3
--- /dev/null
+++ b/tests/postgres_tests/test_json.py
@@ -0,0 +1,25 @@
+import json
+from django.contrib.postgres.forms import JSONField
+from django.test import TestCase
+
+
+class JSONFieldTest(TestCase):
+    def test_valid_json(self):
+        field = JSONField()
+        value = field.to_python('{"key": "value"}')
+        self.assertEqual(value, {"key": "value"})
+
+    def test_invalid_json(self):
+        field = JSONField()
+        with self.assertRaises(ValidationError) as cm:
+            field.to_python('not valid json')
+        self.assertEqual(cm.exception.code, 'invalid')
+
+    def test_empty_value_required(self):
+        field = JSONField(required=True)
+        with self.assertRaises(ValidationError):
+            field.clean('')
+
+    def test_empty_value_not_required(self):
+        field = JSONField(required=False)
+        self.assertIsNone(field.clean(''))
diff --git a/tests/db_functions/test_comparison.py b/tests/db_functions/test_comparison.py
new file mode 100644
index 0000000000..d24fdb1344
--- /dev/null
+++ b/tests/db_functions/test_comparison.py
@@ -0,0 +1,26 @@
+from decimal import Decimal
+from django.db.models import Value
+from django.db.models.functions import Coalesce
+from django.test import TestCase
+
+
+class CoalesceTests(TestCase):
+    def test_coalesce_with_decimal(self):
+        # Test that Decimal values are properly wrapped
+        func = Coalesce(Decimal('10.5'), Value(None))
+        self.assertEqual(len(func.source_expressions), 2)
+        # First expression should be wrapped as Value
+        self.assertIsInstance(func.source_expressions[0], Value)
+        
+    def test_coalesce_requires_expressions(self):
+        with self.assertRaises(ValueError) as cm:
+            Coalesce()
+        self.assertEqual(str(cm.exception), 'Coalesce must have at least one expression')
+        
+    def test_coalesce_single_expression(self):
+        # Should work with single expression
+        func = Coalesce(Value(1))
+        self.assertEqual(len(func.source_expressions), 1)
+        
+    def test_coalesce_multiple_decimals(self):
+        func = Coalesce(Decimal('1.5'), Decimal('2.5'), Decimal('3.5'))
+        self.assertEqual(len(func.source_expressions), 3)